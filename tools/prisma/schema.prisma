generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  email
  github
  google
  openid
  wechat
}

enum Visibility {
  public
  private
}

model User {
  id               String   @id @default(cuid())
  name             String
  picture          String?
  username         String   @unique
  email            String   @unique
  locale           String   @default("en-US")
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  freeDownloads    Int      @default(0) // 免费下载次数，默认0次，需要管理员设置
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]
  orders           Order[]
  downloads        Download[]
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model Resume {
  id         String      @id @default(cuid())
  title      String
  slug       String
  data       Json        @default("{}")
  visibility Visibility  @default(private)
  locked     Boolean     @default(false)
  statistics Statistics?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Statistics {
  id        String   @id @default(cuid())
  views     Int      @default(0)
  downloads Int      @default(0)
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([resumeId, id])
}

enum OrderStatus {
  pending
  paid
  cancelled
  refunded
}

model Order {
  id            String      @id @default(cuid())
  outTradeNo    String      @unique // 商户订单号
  transactionId String?     @unique // 微信支付交易号
  amount        Int         // 金额，单位分
  status        OrderStatus @default(pending)
  resumeId      String      // 关联的简历ID，不使用外键避免Resume表被污染
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  downloads     Download[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId, resumeId])
  @@index([resumeId]) // 用于查询某个简历的所有订单
}

model Download {
  id        String   @id @default(cuid())
  orderId   String?  // 可选，免费下载时为null
  userId    String
  resumeId  String   // 冗余字段，便于统计某个简历的总下载次数
  isFree    Boolean  @default(false) // 标记是否为免费下载
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([userId, resumeId]) // 用于查询用户对某个简历的下载记录
  @@index([userId, isFree]) // 用于查询用户的免费下载记录
  @@index([resumeId]) // 用于统计某个简历的总下载次数
}
